<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lm.dao.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.lm.bean.Article">
        <id column="fid" jdbcType="INTEGER" property="fid"/>
        <result column="titles" jdbcType="VARCHAR" property="titles"/>
        <result column="fcontent" jdbcType="VARCHAR" property="fcontent"/>
        <result column="photo" jdbcType="VARCHAR" property="photo"/>
        <result column="bname" jdbcType="VARCHAR" property="bname"/>
        <result column="time" jdbcType="TIMESTAMP" property="time"/>
        <result column="userid" jdbcType="INTEGER" property="userid"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
    </resultMap>

    <!-- 查询发帖表信息（无条件）（并获取每张帖子所对应评论的条数） -->
    <select id="selectByArticle" parameterType="com.lm.bean.Article" resultMap="BaseResultMap">
    select 
    a.fid, a.titles, a.fcontent, a.photo, a.bname, a.time, a.userid, a.username, a.status,count(c.pid) sum,v.photo userphoto
    from article a left join comment c on a.fid=c.fid left join via v on a.userid=v.userid
	group by a.fid
	order by fid desc
  </select>

    <!-- 按帖子标题模糊查询（搜索框搜索）（并获取每张帖子所对应评论的条数） -->
    <select id="selectByArticleTitle" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    a.fid, a.titles, a.fcontent, a.photo, a.bname, a.time, a.userid, a.username, a.status,count(*) sum
    from article a left join comment c on a.fid=c.fid
    where a.titles like "%" #{articleTitle,jdbcType=VARCHAR} "%"
	group by a.fid
	order by fid desc
  </select>

    <!-- 按帖子板块查询出帖子（并获取每张帖子所对应评论的条数） -->
    <select id="selectByArticleBname" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    a.fid, a.titles, a.fcontent, a.photo, a.bname, a.time, a.userid, a.username, a.status,count(*) sum
    from article a left join comment c on a.fid=c.fid
    where a.bname = #{bname,jdbcType=VARCHAR}
	group by a.fid
	order by fid desc
  </select>

    <!-- 按userid查询发帖表信息 -->
    <select id="selectByArticleId" parameterType="com.lm.bean.Article" resultMap="BaseResultMap">
    select 
    fid, titles, fcontent, photo, bname, time, userid, username, status
    from article
    where userid = #{userid,jdbcType=INTEGER}
    order by fid desc
  </select>

    <!-- 按fid查询发帖表信息 -->
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    a.fid, a.titles, a.fcontent, a.photo, a.bname, a.time, a.userid, a.username, a.status,v.photo userphoto
    from article a left join via v on a.userid=v.userid
    where fid = #{fid,jdbcType=INTEGER}
  </select>

    <!-- 按fid删除帖子 -->
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where fid = #{fid,jdbcType=INTEGER}
  </delete>

    <!-- 删除用户对应的帖子信息(按userid) -->
    <delete id="deleteByUserid" parameterType="java.lang.Integer">
    delete from article
    where userid = #{userid,jdbcType=INTEGER}
  </delete>

    <!-- 向数据库插入发帖信息 -->
    <insert id="insert" parameterType="com.lm.bean.Article">
    insert into article (fid, titles, fcontent, 
      photo, bname, time, 
      userid, username, status
      )
    values (#{fid,jdbcType=INTEGER}, #{titles,jdbcType=VARCHAR}, #{fcontent,jdbcType=VARCHAR}, 
      #{photo,jdbcType=VARCHAR}, #{bname,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
      #{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}
      )
  </insert>

    <!-- 修改帖子表 -->
    <update id="updateByPrimaryKey" parameterType="com.lm.bean.Article">
    update article
    set titles = #{titles,jdbcType=VARCHAR},
      fcontent = #{fcontent,jdbcType=VARCHAR},
      <if test="photo != null ">
        photo = #{photo,jdbcType=VARCHAR},
      </if>
      bname = #{bname,jdbcType=VARCHAR}
    where fid = #{fid,jdbcType=INTEGER}
  </update>

    <!-- 修改article表的status属性（修改审核状态） -->
    <update id="updateArticleStatus" parameterType="com.lm.bean.Article">
    update article
    set status = #{status,jdbcType=INTEGER}
    where fid = #{fid,jdbcType=INTEGER}
  </update>

    <!-- 修改article表中的username -->
    <update id="updateArticleSetup" parameterType="com.lm.bean.Article">
    update article
    set username = #{username,jdbcType=VARCHAR}
    where userid = #{userid,jdbcType=INTEGER}
  </update>
</mapper>